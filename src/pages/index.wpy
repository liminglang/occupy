<style lang="less">
  .startbutton {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  map {
    width: 100%;
    bottom: 0;
  }
  .button{
    position: fixed;
    top: 0
  }
</style>
<template>
  <view>
    <map class='map' style='height:{{height}}px' id="map" longitude="{{longitude}}" latitude="{{latitude}}" scale="{{scale}}" controls="{{controls}}" bindcontroltap="controltap" markers="{{markers}}" bindmarkertap="markertap" polyline="{{polyline}}" bindregionchange="updated" show-location></map>
    <!-- <button class='button' @tap="disPlay">{{buttonContent}}</button> -->
    <canvas canvas-id="myCanvas" style='height:300px;width:150px;margin-top:-10000px'/>
    <!-- <button style='top:{{height/2}}px;left:{{width/2-30}}px;position:absolute;background-color: #44dd15;height:30px;font-size:12px;' @tap="occupy">占领</button> -->
    <!-- <button type="primary" @tap="getCenterLocation">获取位置</button>
    <canvas canvas-id="myCanvas" style='height:300px;width:150px;s'/>
    <image  src="{{imageUrl}}"></image>
    
    <button type="primary" bindtap="translateMarker">移动标注</button>
    <button type="primary" bindtap="includePoints">缩放视野展示所有经纬度</button>
    <view class="startbutton">
      <button open-type="getUserInfo" bindgetuserinfo="userLogin">开始游戏</button>
    </view> -->
  </view>
</template>
<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import { baseUrl, appId} from '@/config'
  import req from '@/network'
  import _ from 'underscore'
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '足迹占领'
    }
    
    async onLoad(e) {
      await this.$parent.login(e);
      this.height = wepy.getSystemInfoSync().windowHeight
      this.width = wepy.getSystemInfoSync().windowWidth
      const location = await wepy.getLocation({
          type: 'gcj02'
        });
      this.latitude = location.latitude;
      this.longitude = location.longitude;
      this.mapCtx = wx.createMapContext('map'); 
      this.mapCtx.moveToLocation();
     // this.getCenterLocation();
      //this.getRegion()
      this.$apply()
      console.log(this.latitude,this.longitude)
      //根据经纬度和userid去trace表中查找，当前位置我是否已经占领了，如果占领了，就显示头像，否则显示占领按钮
     // let self = this;
     // await this.getTraces()
      if(this.isDisplay){
        console.log("isDisplay============================",this.isDisplay)
        await this.getTraces()
      }
     this.isOnload = true
     this.$apply();
    }
    async onShow() {
      //this.onLoad()
    }

    data = {
      isOccupied:true,
      height:wepy.getSystemInfoSync().windowHeight,
      width:wepy.getSystemInfoSync().windowWidth,
      scale:16,
      latitude: 0,
      longitude: 0,
      // markers:[{    //markers的第一个数据永远是当前位置，其他的数据来自trace表
      //   iconPath: '/static/images/occupy.jpg',
      //   id: 0,
      //   name: '卧槽',
      //   latitude: '',
      //   longitude: '',
      //   width: 30,
      //   height: 30,
      //   traceIds: [],
      //   avatars: []
      // }],
      markers: [],
      controls: [],
      range_x: 0,
      range_y: 0,
      isDisplay:true,
      isOnload:false,
      buttonContent:'不显示占领者'
    }
    async updated(e) {
      console.log(e.type)
      let self = this;
      if(e.type == 'end'){
        if(this.isDisplay&&this.isOnload){
          console.log("22222211111111111111111")
          this.getTraces();
        }
      }      
      this.$apply();
    }
    markertap(e) {
      if(this.markers[e.markerId].traceIds.length==1){
        wx.navigateTo({url: `/pages/traceshow?traceId=${this.markers[e.markerId].traceIds[0]}`})
      }else{
        wx.navigateTo({url: `/pages/tracelist?latitude=${this.markers[e.markerId].latitude}&longitude=${this.markers[e.markerId].longitude}&scenic=${this.markers[e.markerId].name}`})
      }
    }
    async controltap(e) {
      console.log(e.controlId)
      if(e.controlId == 1){
        this.scale = this.scale + 1;
        await this.getTraces();
      }else if(e.controlId ==2){
        this.scale = this.scale - 1;
        await this.getTraces();
      }else if(e.controlId==3){
        console.log("controltap=====",this.latitude,this.longitude)
        wx.navigateTo({url: `/pages/occupy?latitude=${this.latitude}&longitude=${this.longitude}`})
      }else{
        if(this.isDisplay){
          this.isDisplay = false;
        }else{
          this.isDisplay = true;
        }
        this.$apply();
        this.initMarkers();
        this.onLoad();
      }
      
      // let self = this;
      // if(this.isDisplay){
      //   // 
      //   console.log("33333333333333333")
      //   await this.getTraces();
      // }
      //this.$apply();
    }
    async getCenterLocation(){
      let self = this;
      const res = await wepy.getLocation({
        type: 'gcj02'
      });
      // self.latitude = res.latitude;
      // self.longitude = res.longitude;
      // //self.mapCtx.moveToLocation();
      // self.$apply();
      console.log(this.latitude,this.longitude,"************************")
    }
    async getRegion(){
      let self = this;
      await this.mapCtx.getRegion({
        success: function(res){
          self.range_x = res.northeast.latitude;
          self.range_y = res.northeast.longitude;
          console.log("getregion-----",self.range_x,self.range_y)
          self.$apply();
        }
      });
      console.log("region======",this.range_x,this.range_y)
    }
    async initMarkers(){
      this.markers = []
      this.controls = [{
        id: 1,
        iconPath: '/static/images/jia.jpg',
        position: {
        left: 0,
        top: 300 - 30,
        width: 30,
        height: 30
        },
        clickable: true
      },
      {
        id: 2,
        iconPath: '/static/images/jian.jpg',
        position: {
        left: 0,
        top: 330 - 30,
        width: 30,
        height: 30
        },
        clickable: true
      },
      {
        id: 4,
        iconPath: '/static/images/occupy.jpg',
        position: {
        left: 0,
        top: 0,
        width: 50,
        height: 30
        },
        clickable: true
      }
      ]
      let url = baseUrl + `/trace/isOccupied?latitude=${this.latitude}&longitude=${this.longitude}&userId=${this.$parent.globalData.user.id}`;
      const result = await req.get(url).catch((err)=>{
        console.log("updateAvatarError...", err.data)})
      if(result.data.data.userIds){
          const userIds = _.pluck(result.data.data.userIds,'userId')
          if(_.indexOf(userIds,this.$parent.globalData.user.id)>-1){
            this.isOccupied = true;
          }else{
            console.log("222222222222222111111111111111111111111")
            this.isOccupied = false;
            this.controls.push({
              id: 3,
              iconPath: '/static/images/occupy.jpg',
              position: {
                left: wepy.getSystemInfoSync().windowWidth/2-15,
                top: wepy.getSystemInfoSync().windowHeight/2-5,
                width: 30,
                height: 30
              },
              clickable: true
            })
          }
      }
      this.$apply();
    }
    async getTraces(){
      console.log("this.scale================",this.scale)
      const res = await wepy.getLocation({
        type: 'gcj02'
      });
      await this.getRegion();
      this.initMarkers();
      let self = this;
      console.log("进入settimeout之前latitude========,longitude========",self.latitude,self.longitude)
      console.log("进入settimeout之前range_x1========,range_y1========",self.range_x,self.range_y)
      let latitude1,longitude1,range_x1,range_y1;
      latitude1 = res.latitude
      longitude1 = res.longitude     
      setTimeout(async () =>{
        if(range_x1>=1){
          range_x1 = range_x1 - latitude1;
          //self.$apply();
        }
        if(range_y1>=1){ 
          range_y1 = range_y1 - longitude1;
         // self.$apply();
        }
        console.log("self==========",self)
        console.log("latitude========,longitude========",latitude1,longitude1)
        let url = baseUrl + `/trace/getTraces?latitude=${latitude1}&longitude=${longitude1}&range_x=0.25&range_y=0.25`;
        const traces = await req.get(url).catch((err)=>{
          console.log("updateAvatarError...", err.data)})
        if (traces.data) {
          let data = traces.data.data;
          let scenices = _.groupBy(data,function(obj){return obj.scenic});
          console.log("scenices==============",scenices)
          let k = 0;
          for(var i in scenices) {
            let marker = {};
            marker['id'] = k;
            marker['latitude'] = scenices[i][0].latitude;
            marker['longitude'] = scenices[i][0].longitude;
            marker['width'] = 30;
            marker['height'] = 30;
            marker['name'] = i;
            marker['traceIds'] = _.pluck(scenices[i], 'id');
            marker['avatars'] = _.pluck(scenices[i], 'avatar');
            self.markers.push(marker);
            k = k+1;
          }
        }
        setTimeout(async()=>{
          await self.drawAvatar(self.markers);
        },200) 
        self.$apply();
      },1000);
      
        
     // this.$apply();
    }
    async drawAvatar(markers){
      let self = this
      const ctx = wepy.createCanvasContext('myCanvas');
      ctx.beginPath()
      console.log(markers.length)
      for(var j=0; j < markers.length; j++){
        console.log(markers[j].avatars[0])
        for(var i=0; i < markers[j].avatars.length; i++){
          ctx.arc(15+i*30, 15+j*30, 15, 0, 2 * Math.PI);
        }
      }
      ctx.clip();
      for(var j=0; j < markers.length; j++){
        for(var i=0; i < markers[j].avatars.length; i++){
          ctx.drawImage(markers[j].avatars[i], 0+30*i, 30*j, 30, 30);
        }
      }      
      ctx.save()
      ctx.draw(true, async ()=>{
        //绘制方法
        for(var j=0; j < markers.length; j++){
          const res = await wepy.canvasToTempFilePath({
            x:0,
            y:30*j,
            width:30*markers[j].avatars.length,
            height:30,
            destWidth:30*markers[j].avatars.length,
            destHeight:30,
            canvasId: 'myCanvas',
            fileType: 'jpeg',
          });
          // if(markers[j].name=='市政府'){
          markers[j]['iconPath'] = res.tempFilePath
          // const saveRes = await wepy.saveImageToPhotosAlbum({
          //   filePath: res.tempFilePath
          // }).catch((err)=>{
          //   return false;
          // });
          // if(saveRes){
          //   wepy.showToast({
          //     title: "已保存至相册",
          //     icon: "none"
          //   });
          // }
        }
        self.markers = markers;
        self.$apply();
      })
     
      console.log("********************",this.markers) 
      this.$apply()
    }
    methods = {
      occupy() {
        wx.navigateTo({url: `/pages/occupy?latitude=${this.latitude}&longitude=${this.longitude}`})
      },
      async userLogin(e) {
        const userInfo = e.detail.userInfo;
        console.log(userInfo)
        if (userInfo) {
          if (!this.$parent.globalData.userInfo) {
            const setting = await wepy.getSetting()
            if (setting.authSetting['scope.userInfo']) {
              const info = await wepy.getUserInfo()
              this.$parent.globalData.userInfo = info.userInfo
              let url = baseUrl + '/auth/updateUser'
              const setData = {'id':this.$parent.globalData.user.id, 'name': info.userInfo.nickName, 'avatar': info.userInfo.avatarUrl, 'gender': info.userInfo.gender}
              await req.post(url, setData).catch((err)=>{
                console.log("updateAvatarError...", err.data)})
              this.$parent.globalData.user.name = info.userInfo.nickName;
              this.$parent.globalData.user.avatar = info.userInfo.avatarUrl;
            }
          }
          else{
            wx.switchTab({url: '/pages/ablum'})
          }          
        }
      },

      disPlay(){
        if(this.isDisplay){
          this.isDisplay = false;
          this.buttonContent = '显示占领者';
        }else{
          this.isDisplay = true;
          this.buttonContent = '不显示占领者'
        }
        this.$apply();
        this.initMarkers();
        this.onLoad();
      }
      
    }
  }
</script>