<style lang="less">
  .startbutton {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  map {
    width: 100%;
    bottom: 0;
  }
  .button{
    width:80px; 
    height:40px; 
    margin-left : 0;
  }
  .large{
    position: fixed;
    left: 0px;
    top: 270px;
  }
  .narrow{
    position: fixed;
    left: 0px;
    top: 300px;
  }
  .occupy{
    position: fixed;
    left: 0px;
    top: 0px;
  }
  .img{
    width: 30px;
    height: 30px;
  }
</style>
<template>
  <view>
    <map class='map' style='height:{{height}}px' id="map" longitude="{{longitude}}" latitude="{{latitude}}" scale="{{scale}}" bindcallouttap="occupy"  controls="{{controls}}" bindcontroltap="controltap" markers="{{markers}}" bindmarkertap="markertap" polyline="{{polyline}}" bindregionchange="updated" show-location>
      <cover-view>
        <block wx:if="{{!isAuth}}">
          <button class='button' open-type="getUserInfo" bindgetuserinfo="userLogin">点击授权</button>
        </block>
      </cover-view>
      <cover-view class="large" @tap="large">
        <cover-image class="img" src="/static/images/jia.jpg" />
      </cover-view>
      <cover-view class="narrow" @tap="narrow">
        <cover-image class="img" src="/static/images/jian.jpg" />
      </cover-view>
      <!-- <cover-view class="occupy" @tap="occupy">
        <cover-image class="img" src="/static/images/occupy.jpg" />
      </cover-view> -->
    </map>
    <canvas canvas-id="myCanvas" style='height:300px;width:150px;margin-top:-10000px'/>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import { baseUrl, appId,txMapsKey} from '@/config'
  import req from '@/network'
  import _ from 'underscore'
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '足迹占领'
    }
    
    async onLoad(e) {
      await this.$parent.login(e);
      const setting = await wepy.getSetting()
      if (!setting.authSetting['scope.userInfo']){
        this.isAuth = false;
      }
      const result = await wepy.getSystemInfo();
      this.height = wepy.getSystemInfoSync().windowHeight
      this.width = wepy.getSystemInfoSync().windowWidth
      let self = this;
      wx.getLocation({
        type: 'gcj02',
        async success (res) {
          self.latitude = res.latitude
          self.longitude = res.longitude
          self.$apply();
          await self.initMarkers();
          self.mapCtx = wx.createMapContext('map'); 
          self.mapCtx.moveToLocation();
          if(self.isDisplay){
            await self.getTraces();
          }
          self.isOnload = true
          self.$apply(); 
        },
        fail (err) {
          wx.getSetting({
            success (res){
              if (!res.authSetting['scope.userLocation']){
                wx.showModal({
                  title: '是否授权当前位置',
                  content: '需要获取您的地理位置，请确认授权，否则地图功能将无法使用',
                  success (tip) {
                    if (tip.confirm) {
                      wx.openSetting({
                        success (data) {
                          if (data.authSetting["scope.userLocation"] === true) {
                            wx.showToast({
                              title: '授权成功',
                              icon: 'success',
                              duration: 1000
                            })
                            wx.getLocation({
                              type: 'gcj02',
                              async success (res) {
                                self.latitude = res.latitude
                                self.longitude = res.longitude
                                self.$apply(); 
                                await self.initMarkers();
                                self.mapCtx = wx.createMapContext('map'); 
                                self.mapCtx.moveToLocation();
                                if(self.isDisplay){
                                  await self.getTraces();
                                }
                                self.isOnload = true
                                self.$apply(); 
                              }
                            })
                          }           
                        }
                      })
                    }
                  }
                })
              }
            }
          })
        }
      })
    }
 
    afterOccupy(iconPath){
      this.markers[0]= {};
    //  let traceIds = []
      let avatars = []
   //   traceIds.push(traceId);
      avatars.push(this.$parent.globalData.user.avatar);
      if(!this.isOccupied){        
        this.markers.push({
          iconPath:iconPath ,
          id: this.markers.length+1,
          latitude: this.latitude,
          longitude: this.longitude,
          width: 30,
          height: 30,
          avatars:avatars
     //     traceIds:traceIds
        })
      }
      this.$apply();
    }
    async onShow() {
    }

    data = {
      isOccupied:false,
      height:wepy.getSystemInfoSync().windowHeight,
      width:wepy.getSystemInfoSync().windowWidth,
      scale:16,
      latitude: 0,
      longitude: 0,
      scenic:'',
      markers: [],
      controls: [],
      range_x: 0,
      range_y: 0,
      isDisplay:true,
      isOnload:false,
      isOccupiedByOther:false,
      buttonContent:'不显示占领者',
      isAuth:true
    }
    async updated(e) {
      
      this.$apply();
    }
    markertap(e) {
      console.log("e===============",e)
      if(e.markerId == 0){
        wx.navigateTo({url: `/pages/occupy?latitude=${this.latitude}&longitude=${this.longitude}`})
      }else{
        console.log(e.markerId);
        console.log(this.markers)
        if(this.markers[e.markerId].traceIds.length==1){
          wx.navigateTo({url: `/pages/traceshow?traceId=${this.markers[e.markerId].traceIds[0]}`})
        }else{
          wx.navigateTo({url: `/pages/tracelist?latitude=${this.markers[e.markerId].latitude}&longitude=${this.markers[e.markerId].longitude}&scenic=${this.markers[e.markerId].name}`})
        }
      }
    }
    async getCenterLocation(){
      let self = this;
      const res = await wepy.getLocation({
        type: 'gcj02'
      });
      console.log(this.latitude,this.longitude,"************************")
    }
    async getRegion(){
      let self = this;
      await this.mapCtx.getRegion({
        success: function(res){
          self.range_x = res.northeast.latitude;
          self.range_y = res.northeast.longitude;
          console.log("getregion-----",self.range_x,self.range_y)
          self.$apply();
        }
      });
      console.log("region======",this.range_x,this.range_y)
    }
    async getCityNameFromTX(latitude, longitude) {
      const url = `https://apis.map.qq.com/ws/geocoder/v1/?location=${latitude},${longitude}&key=${txMapsKey}`;
      const res = await wepy.request({url: url, method: 'GET'}).catch((err)=>{
        console.log("error...",err.data);
        return {}
      });
      if(!this.scenic) {
        if(res.data.result.address_reference.famous_area){
          this.scenic = res.data.result.address_reference.famous_area.title;
        }else{
          this.scenic = res.data.result.address_reference.landmark_l2.title;
        }
      }
      this.$apply(); 
    }
    async initMarkers(){
      this.markers = []
      await this.getCityNameFromTX(this.latitude,this.longitude)
      let url = baseUrl + `/trace/isOccupied?scenic=${this.scenic}`;
      const result = await req.get(url).catch((err)=>{
        console.log("updateAvatarError...", err.data)})
      if(result.data.data.traces){
          const userIds = _.pluck(result.data.data.traces,'userId')
          if(_.indexOf(userIds,this.$parent.globalData.user.id)>-1){
            this.isOccupied = true;
            this.markers.push({})
          }else{
            this.isOccupied = false;
            if(userIds.length){
              this.isOccupiedByOther = true;
            }
            this.markers.push({    //markers的第一个数据永远是当前位置，其他的数据来自trace表
              iconPath: '',
              id: 0,
              latitude: this.latitude,
              longitude: this.longitude,
              width: 30,
              height: 30,
              avatars:[],
              traceIds:[],
              callout:{
                content:'点击占领',
                display:'ALWAYS'
              }
            })
          }
      }
      this.$apply();
    }
    async getTraces(){
      let self = this;
      wx.getLocation({
        type: 'gcj02',
        success (res) {
          self.latitude = res.latitude;
          self.longitude = res.longitude;
          self.$apply();
        }
      })
      await this.getRegion();
      this.initMarkers();
      let latitude1,longitude1,range_x1,range_y1;
      latitude1 = self.latitude
      longitude1 = self.longitude     
      setTimeout(async () =>{
        if(range_x1>=1){
          range_x1 = range_x1 - latitude1;
          //self.$apply();
        }
        if(range_y1>=1){ 
          range_y1 = range_y1 - longitude1;
         // self.$apply();
        }
        let url = baseUrl + `/trace/getTraces?latitude=${latitude1}&longitude=${longitude1}&range_x=0.25&range_y=0.25`;
        const traces = await req.get(url).catch((err)=>{
          console.log("updateAvatarError...", err.data)})
        if (traces.data) {
          let data = traces.data.data;
          let scenices = _.groupBy(data,function(obj){return obj.scenic});
          let k = 1;
          for(var i in scenices) {
            let marker = {};
            marker['id'] = k;
            marker['latitude'] = scenices[i][0].latitude;
            marker['longitude'] = scenices[i][0].longitude;
            marker['width'] = 30;
            marker['height'] = 30;
            marker['name'] = i;
            marker['traceIds'] = _.pluck(scenices[i], 'id');
           // marker['iconPath'] = scenices[i][0].iconPath
            marker['avatars'] = _.pluck(scenices[i], 'avatar');
            self.markers.push(marker);
            k = k+1;
          }
        }
        setTimeout(async()=>{
          await self.drawAvatar(self.markers);
        },200) 
        self.$apply();
      },1000);
      
        
     // this.$apply();
    }
    async drawAvatar(markers){
      let self = this
      const ctx = wepy.createCanvasContext('myCanvas');
      ctx.beginPath()
     // console.log(markers.length)
      for(var j=1; j < markers.length; j++){
      //  console.log(markers[j].avatars[0])
        for(var i=0; i < markers[j].avatars.length; i++){
          ctx.arc(15+i*30, 15+(j-1)*30, 15, 0, 2 * Math.PI);
        }
      }
      ctx.clip();
      for(var j=1; j < markers.length; j++){
        for(var i=0; i < markers[j].avatars.length; i++){
          console.log(markers[j].avatars[i])
          let avatar = await wepy.downloadFile({url:markers[j].avatars[i]}); 
          ctx.drawImage(avatar.tempFilePath, 0+30*i, 30*(j-1), 30, 30);
        }
      }      
      ctx.save()
      ctx.draw(true, async ()=>{
        //绘制方法
        for(var j=1; j < markers.length; j++){
          const res = await wepy.canvasToTempFilePath({
            x:0,
            y:30*(j-1),
            width:30*markers[j].avatars.length,
            height:30,
            destWidth:30*markers[j].avatars.length,
            destHeight:30,
            canvasId: 'myCanvas',
            fileType: 'jpeg',
          });
          markers[j]['iconPath'] = res.tempFilePath
        }
        self.markers = markers;
        self.$apply();
      })
    }
    async occupy() {
      if (!this.isAuth){
        wx.showToast({
          title: '请先授权用户信息',
          icon:'none'})
      }else{
        wx.navigateTo({url: `/pages/occupy?latitude=${this.latitude}&longitude=${this.longitude}`})
      }
    }
    async userLogin(e) {
      const userInfo = e.detail.userInfo;
      if (userInfo) {
        if (!this.$parent.globalData.userInfo) {
          const setting = await wepy.getSetting()
          if (setting.authSetting['scope.userInfo']) {
            const info = await wepy.getUserInfo()
            this.$parent.globalData.userInfo = info.userInfo
         //   let avatar = await wepy.downloadFile({url:info.userInfo.avatarUrl});
            let url = baseUrl + '/auth/updateUser'
            const setData = {'id':this.$parent.globalData.user.id, 'name': info.userInfo.nickName, 'avatar': info.userInfo.avatarUrl, 'gender': info.userInfo.gender}
            const userId = await req.post(url, setData).catch((err)=>{
              console.log("updateAvatarError...", err.data)})
            this.$parent.globalData.user.name = info.userInfo.nickName;
            this.$parent.globalData.user.avatar = info.userInfo.avatarUrl;
            this.isAuth = true;
            this.$apply();
          }
        }
        else{
          wx.switchTab({url: '/pages/ablum'})
        }          
      }
    }
    methods = {
      large(){
        let self = this;
        this.mapCtx.getCenterLocation({
          success (res) {
            self.latitude = res.latitude;
            self.longitude = res.longitude;
            self.scale = self.scale+1;
            self.$apply();
          }
        })
        //console.log("large之后=====",this.latitude,this.longitude)
      },
      narrow(){
        let self = this;
        this.mapCtx.getCenterLocation({
          success (res) {
            self.latitude = res.latitude;
            self.longitude = res.longitude;
            self.scale = self.scale-1;
            self.$apply();
          }
        })
      },
      disPlay(){
        if(this.isDisplay){
          this.isDisplay = false;
          this.buttonContent = '显示占领者';
        }else{
          this.isDisplay = true;
          this.buttonContent = '不显示占领者'
        }
        this.$apply();
        this.initMarkers();
        this.onLoad();
      }
      
    }
  }
</script>