<style lang="less">
  map {
    width: 100%;
    bottom: 0;
  }
  .button{
    width:80px; 
    height:40px; 
    margin-left : 0;
  }
  .large{
    position: fixed;
  }
  .narrow{
    position: fixed;
  }
  .occupy{
    position: fixed;
    left: 0px;
    top: 0px;
  }
  .img{
    width: 28pt;
    height: 36pt;
  }
  .avatar{
    width: 100%;
    height: 25pt;
  }
  .avatar-position{
    position: fixed;
    left: 90%;
    top: 50pt;
  }
//弹出框
  .confirm {
    width: 40%;
    background: #019B79 ;//背景色
    border-radius: 35px;	//圆角的大小
    color:#ffff;
    font-size: 14px;
    margin-top: 2%;
  }
  .gps {
    height: 30px;
    width: 30px;
  }
  .flex {
    display:flex;
  }
  .up-pic {
    width: 90%;
    height: 45%;
    margin:0 auto;
    justify-content: center;
    border:1px solid #EBEBEB;
  }
  .pic-box{  
    margin-top:5rpx;  
    flex-flow:wrap;  
    width:95%;   
  } 
  .ap-box{  
    position: relative;  
  }
  .add-pic{  
    width: 160rpx;  
    height: 160rpx;  
    margin-right: 20rpx;  
    position: relative;  
    margin: 15rpx 20rpx 20rpx 30rpx; 
  } 
  .img-de{  
    width:45rpx;  
    height:45rpx;  
    border-radius:50%;  
    position:absolute;  
    right:-41rpx;  
    top:5rpx;  
  }
  .add {
    margin-left: 5%;
    height: 100%;
    width: 90%;
    display: flex;
  }
  .a{
    margin-top: 10%;
    display: flex;
    flex-direction: row;
    align-items: center;
    width: 100%;
  }
  .selectlocation{
    border-top:10px soild transparent;
    border-left:30px soild transparent;
    border-right:30px soild transparent;
    display:inline-block;margin:0 auto;width:30px;
  }
  .modal-mask {
    width: 100%;
    height: 20%;
    position: fixed;
    top: 0;
    left: 0;
    background: #000;
    opacity: 0.5;
    overflow: hidden;
    z-index: 9000;
    color: #fff;
  }

.modal-dialog {
  width: 100%;
  height: 80%;
  overflow: hidden;
  position: fixed;
  top: 20%;
  // left: 2.5%;
  z-index: 9999;
  background: #f9f9f9;
  //margin: -180rpx 105rpx;
  border-radius: 10rpx;
}
.text{
  background-color: #CCEBE5;
  margin-left: 2%;
  height: 15%;
  width: 95%;
  margin-top: 6%;
  font-size: 13pt;
  color: #019B79;
}
.jiantou {
  margin-right:20px;
  float:right;
  height: 15px;
  width: 15px;
}
.attention{
  font-size:10pt;
  color:#939393;
  text-align:center;
  margin-top: 2%;
}
.close{
  width:5%;
  height: 5%;
  position: fixed;
  top: 19%;
  left: 95%;
}
.delete{
  width: 20px;
  height: 20px;
}
//弹出框2
.two_text {
    display:inline-block;
    margin-left:3%;
    width:50%;
  }
 .two_heart{
    display:inline-block;
    width:6%;
    margin-left:3%;
    height:30%;
  }
  .two_avatar {
    border-radius: 50%;
  }
  .two_a{
    margin: 5%;
    display: flex;
    flex-direction: row;
    align-items: center;
    height: 12%;
    width: 100%;
  }
  .two_content {
    flex: 1;
    margin-left: 3%;
    text-overflow:ellipsis;
    margin-bottom:3%;
    color:#019B79;

  }
  .two_declaration {
    flex: 1;
    width: 100%;
    margin-left: 10px;
    text-overflow:ellipsis;
    overflow: hidden;
    text-overflow:ellipsis;
    white-space: nowrap;
    color:#939393;
    font-size:10pt;

  }
  .two_up-pic {
    width:90%;
    height:100%;
    margin:0 auto;
    justify-content:center;
    border:1px solid #EBEBEB;
    flex-wrap:wrap;
    display: flex;
  }
  .two_pic-box{  
    width:90%;
    height:50%;
    margin:0 auto;
  } 
  .two_ap-box{  
    position: relative;
    width:30%;
    height:50%;
    margin-left:3%;
    margin-top:2%;
  }
  .two_add-pic{  
    width:100%;
    height:80%;
  }
  .date{
    color:#939393;
    font-size:10pt;
    margin-left:10%
  }
  .c{
    color:#019B79;
    font-size:13pt;
    margin-left:30%;
    margin-top:3%;
    display:flex;
    width:100%
  }
  .shangchuan{
    margin-left:15%;
    height:70%;
    width:70%;
    display:flex;
    margin-top:15%;
  }
</style>
<template>
  <view>
    <map class='map' style='height:{{height}}px' id="map" longitude="{{longitude}}" latitude="{{latitude}}" scale="{{scale}}" bindcallouttap="occupy"  controls="{{controls}}" bindcontroltap="controltap" markers="{{markers}}" bindmarkertap="markertap" polyline="{{polyline}}" bindregionchange	="updated" show-location>
      <!-- <cover-view wx:if='{{showModal==false}}'> -->
        <cover-view>
          <block wx:if="{{!isAuth}}">
            <button class='button' open-type="getUserInfo" bindgetuserinfo="userLogin">点击授权</button>
          </block>
        </cover-view>
        <!-- <cover-view wx:if='{{!showModal}}'> -->
          
        <!-- </cover-view> -->
      <!-- </cover-view> -->
    </map>
      <cover-view class="large" style='top:330px;left:{{width-75}}px;' @tap="large" wx:if='{{!showModal}}'>
        <cover-image class="img" src="/static/images/jia.jpg" />
      </cover-view>
      <cover-view class="narrow"  style='display:fixed;top:378px;left:{{width-75}}px' @tap="narrow" wx:if='{{!showModal}}'>
        <cover-image class="img" src="/static/images/jian.jpg" />
      </cover-view>
      <cover-view style='position:fixed;top:100px;left:{{width-50}}px' wx:if='{{isDisplay && !showModal}}'>
        <cover-image  @tap="disPlay" style='width:50px;height:35px' src="/static/images/showavatar.png"/>
      </cover-view>
      <cover-view style='position:fixed;top:100px;left:{{width-50}}px' wx:else>
        <cover-image wx:if='{{!isDisplay && !showModal}}' @tap="disPlay" style='width:50px;height:35px' src="/static/images/hideavatar.png"/>
      </cover-view>
      <cover-view style='position:fixed;top:450px;left:{{width-75}}px' wx:if='{{!showModal}}'>
        <cover-image  @tap="occupy" style='width:50px;height:50px' src="/static/images/occupy.png"/>
      </cover-view>
      <!-- <cover-view class="occupy" @tap="occupy">
        <cover-image class="img" src="/static/images/occupy.jpg" />
      </cover-view> -->
      <cover-view class="modal-mask" @tap="hideModal" catchtouchmove="preventTouchMove" wx:if="{{showModal}}"></cover-view>
      <view class="modal-dialog" wx:if="{{showModal && markerId ==-1}}">
        <image class='close' mode='aspectFit' src='/static/images/close_pic.jpg' bindtap='closeModal'></image>  
        <textarea rows="2" cols="20"  value='{{content}}' class='text' bindblur='bindFormSubmit'></textarea>
        <view style='width:100%;height:45%' wx:if='{{imgbox.length==0}}'>
          <image class='add' mode='aspectFit' src='/static/images/add_pic.jpg' bindtap='uploadPhoto'></image>
        </view>
        <!-- <view style='height:35%;width:100%;' wx:else>
            <view class='add'>
              <block wx:key="imgbox" wx:for="{{imgbox}}">
                <view class='ap-box'>
                  <view class='add-pic'>
                    <image  src='{{item}}'></image>
                    <view class='img-de' data-deindex='{{index}}' bindtap='imgDelete'>
                      <image class='delete' src='/static/images/close_pic.jpg'></image>
                    </view>
                  </view>
                </view>
              </block>
              <image style = 'height:50%;width:30%;margin-left:15px;'  mode='aspectFill' bindtap='uploadPhoto' wx:if="{{imgbox.length<6}}" src='/static/images/add_pic.jpg'></image>
            </view>
        </view> -->
        <view class='up-pic' wx:if='{{imgbox.length>0}}'>
        <view class='flex pic-box'>
          <block wx:key="imgbox" wx:for="{{imgbox}}">
            <view class='ap-box'>
              <view class='add-pic'>
                <image class='add-pic' mode='aspectFill' src='{{item}}'></image>
                  <view class='img-de' data-deindex='{{index}}' bindtap='imgDelete'>
                    <image class='gps' src='/static/images/close_pic.jpg'></image>
                  </view>
              </view>
            </view>
          </block>
          <view class='add-pic' bindtap='uploadPhoto' wx:if="{{imgbox.length<6}}">
            <view wx:if='{{imgbox.length==0}}'>
              <image style='width:{{width}}px;height:280px' mode='aspectFit' src='/static/images/add_pic.jpg'></image>
            </view>
            <view style='height:100%' wx:else>
              <image class='shangchuan' mode='aspectFill' src='/static/images/shangchuan.png'></image>
            </view>
          </view>
        </view>
      </view>
        <view class='a'>
          <!-- <navigator url="/pages/location?imgbox={{imgbox}}"  class="weui-cell weui-cell_access"  style='margin:0 auto' hover-class="weui-cell_active"> -->
            <image class="gps" src="/static/images/address.jpg" mode='aspectFit' style='margin-left:30px'></image>
            <view style='color:#019B79;margin-left:5px;display:inline-block'>{{city}} · {{scenic}}</view>
            <image class="jiantou selectlocation" mode='aspectFit' src="/static/images/jiantou.png" mode='aspectFit' @tap='chooseLocation'></image>
          <!-- </navigator> -->
        </view>
        <button class='confirm' @tap="confirm">确认</button>
        <view class ='attention'>注意：占领默认时长为24小时,每收获一个赞,延长一小时。</view>
      </view>
      <view class="modal-dialog" wx:if="{{showModal && markerId>-1}}">
        <image class='close' mode='aspectFit' src='/static/images/close_pic.jpg' bindtap='closeModal'></image>
        <view class="two_a">
          <image class="two_avatar" style='height:{{avatar_height}}px;width:{{avatar_height}}px' mode="aspectFit" src="{{avatar}}"></image>
          <view class='two_text'>
            <view class='two_content'>{{name}}</view>
            <view wx:if='{{declaration}}' class='two_declaration'>{{declaration}}</view>
          </view>
          <image class="two_heart" mode="aspectFill" src="{{imageUrl}}" @tap='changeParisecount({{id}})'></image>
          <view wx:if="{{parisecount}}" style='display:inline-block;margin-left:5px;'>{{parisecount}}</view>
        </view>
        <view class = 'c'>
          <view style='font-size:10pt'>第</view>
          <view style='font-size:16pt;margin-top:-2%'>{{number}}</view>
          <view style='font-size:10pt'>个占领此处</view>
        </view>
        <view style='width:100%;height:40%;margin-top:2%'>
          <view class='two_up-pic'>
              <block wx:key="imgbox" wx:for="{{imgbox}}">
                <view class='two_ap-box'>
                    <image class='two_add-pic' mode="aspectFill" src='{{item}}' @tap="previewImage({{item}})"></image>
                </view>
              </block>
          </view>
        </view>
        <view class='a' style='margin-top:5%'>
          <!-- <navigator url="/pages/location?imgbox={{imgbox}}"  class="weui-cell weui-cell_access"  style='margin:0 auto' hover-class="weui-cell_active"> -->
          <image class="gps" src="/static/images/address.jpg" mode='aspectFit' style='margin-left:5%'></image>
          <view style='color:#019B79;margin-left:5px;display:inline-block;font-size:13pt;width:50%'>{{city}} · {{scenic}}</view>
          <view class='date'>{{dateString}}</view>
        </view>
        <view style='width:100%;align-items: center; display:flex;margin-top:10%'>
          <block wx:if="{{isOwner}}">
            <button class="confirm"  open-type="share">分享给好友</button>
            <button class="confirm"  @tap="getPost">生成海报</button>
          </block>
          <block wx:else>
            <button class="confirm" style='width:30%;' open-type="share">分享给好友</button>
          </block>
        </view>
      </view>
    <canvas canvas-id="myCanvas" style='height:300px;width:{{width}};margin-top:-10000px'/>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import { baseUrl, appId,txMapsKey} from '@/config'
  import req from '@/network'
  import _ from 'underscore'
  let tout ;
  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '旅行的我',
      navigationBarBackgroundColor:'#019B79'
    }
    
    async onLoad(e) {
      await this.$parent.login(e);
      this.content = "占领宣言：" + this.$parent.globalData.user.name +'到此一游!';
      this.declaration = this.$parent.globalData.user.name +'到此一游!';
      this.name = this.$parent.globalData.user.name;
      this.avatar = this.$parent.globalData.user.avatar;
      const setting = await wepy.getSetting()
      if (!setting.authSetting['scope.userInfo']){
        this.isAuth = false;
      }
      const result = await wepy.getSystemInfo();
      this.height = wepy.getSystemInfoSync().windowHeight
      this.width = wepy.getSystemInfoSync().windowWidth
      this.avatar_height = this.width*0.17
      let self = this;
      wx.getLocation({
        type: 'gcj02',
        async success (res) {
          self.latitude = res.latitude
          self.longitude = res.longitude
          self.curLatitude = res.latitude
          self.curLongitude = res.longitude
          self.$apply();
          self.mapCtx = wx.createMapContext('map'); 
          self.mapCtx.moveToLocation();
          // self.markers.push({    //markers的第一个数据永远是当前位置，其他的数据来自trace表
          //   iconPath: '/static/images/occupy.png',
          //   id: 0,
          //   latitude: self.curLatitude,
          //   longitude: self.curLatitude,
          //   width: 30,
          //   height: 30,
          //   avatars:[],
          //   traceIds:[]
          // })
          if(self.isDisplay){
            await self.getTraces();
          }
          self.isOnload = true
          self.$apply(); 
        },
        fail (err) {
          wx.getSetting({
            success (res){
              if (!res.authSetting['scope.userLocation']){
                wx.showModal({
                  title: '是否授权当前位置',
                  content: '需要获取您的地理位置，请确认授权，否则地图功能将无法使用',
                  success (tip) {
                    if (tip.confirm) {
                      wx.openSetting({
                        success (data) {
                          if (data.authSetting["scope.userLocation"] === true) {
                            wx.showToast({
                              title: '授权成功',
                              icon: 'success',
                              duration: 1000
                            })
                            wx.getLocation({
                              type: 'gcj02',
                              async success (res) {
                                self.latitude = res.latitude
                                self.longitude = res.longitude
                                self.curLatitude = res.latitude
                                self.curLongitude = res.longitude
                                self.$apply(); 
                                self.mapCtx = wx.createMapContext('map'); 
                                self.mapCtx.moveToLocation();
                                // self.markers.push({    //markers的第一个数据永远是当前位置，其他的数据来自trace表
                                //   iconPath: '/static/images/occupy.png',
                                //   id: 0,
                                //   latitude: self.curLatitude,
                                //   longitude: self.curLongitude,
                                //   width: 30,
                                //   height: 30,
                                //   avatars:[],
                                //   traceIds:[]
                                // })
                                if(self.isDisplay){
                                  await self.getTraces();
                                }
                                self.isOnload = true
                                self.$apply(); 
                              }
                            })
                          }           
                        }
                      })
                    }
                  }
                })
              }
            }
          })
        }
      })
      if(e.scene){
        let scene = decodeURIComponent(e.scene);
        console.log("scene[1]====",scene.split('&')[1]);
        
        await this.getTraceInfo(parseInt(scene.split('&')[1]),1);
        await this.getOtherTraces();
        this.markerId =1;
        this.showModal = true;
        this.$apply();
      }
    }
 
    async afterOccupy(traceId,iconPath){
      console.log("traceID======",traceId)
      this.isOccupied = true;
      this.isOwner = true;
      this.markerId = 1;
      this.imgbox = [];
      this.content = "占领宣言：" + this.$parent.globalData.user.name +'到此一游!';
      await this.getTraceInfo(traceId)
      if(this.isDisplay){
        await this.getTraces()
      }
      this.$apply();
      console.log(this.markers)
    }
    async onShow() {
    }

    data = {
      id:'',
      isOccupied:false,
      height:wepy.getSystemInfoSync().windowHeight,
      width:wepy.getSystemInfoSync().windowWidth,
      scale:16,
      latitude: 0,
      longitude: 0,
      curLatitude:0,
      curLongitude:0,
      scenic:'',
      markers: [],
      markerId:-1,
      controls: [],
      range_x: 0,
      range_y: 0,
      isDisplay:true,
      isOnload:false,
      isAuth:true,
      showModal:false,
      content:'',
      city:'',
      locationName:'',
      iconPath:'',
      province:'',
      imgbox:[],
      avatar:'',
      name:'',
      declaration:'',
      imageUrl:"/static/images/heart.jpg",
      isOwner:false,
      number:1,
      dateString:'',
      avatar_height:0,
      parisecount:0,
      isParised:false,
      northeast:{},
      southwest:{}
    }
    updated(e) {
      let self = this;
      if(tout){
        clearTimeout(tout);
      }
      tout = setTimeout(async()=>{
        if(e.type =='end'  && self.isOnload && !self.showModal){
            if(self.isDisplay){
              await self.getTraces()
            self.$apply();
            }
          }
        if(e.causedBy == 'scale'){
          self.mapCtx.getScale({
            success(res){
              self.scale = res.scale+1;
              self.$apply()
            }
          })
        }
      },1000)  
    }
      // function handler(){
      //     tout = null;
      // }
      
        
    
    markertap(e) {
      // if(e.markerId == 0){
      //   this.occupy()
      // }else{
        console.log(e.markerId);
          console.log(this.markers[e.markerId])
        if(this.markers[e.markerId].traceIds.length==1){
          this.markerId = e.markerId;
          this.getTraceInfo(this.markers[e.markerId].traceIds[0])
          wx.hideTabBar();
          this.height = 0.2*wepy.getSystemInfoSync().windowHeight
          this.id = this.markers[e.markerId].traceIds[0]
          this.showModal = true;
          this.$apply();
          //wx.navigateTo({url: `/pages/traceshow?traceId=${this.markers[e.markerId].traceIds[0]}`})
        }else{
          wx.navigateTo({url: `/pages/tracelist?traceIds=${this.markers[e.markerId].traceIds}`})
        }
      // }
    }
    async getCenterLocation(){
      let self = this;
      const res = await wepy.getLocation({
        type: 'gcj02'
      });
    }
    async getRegion(){
      let self = this;
      await this.mapCtx.getRegion({
        success: function(res){
          let offset = (res.northeast.latitude-res.southwest.latitude)*30/self.height
          self.markers[0].latitude = self.curLatitude - offset
          console.log(self.latitude,res.southwest.latitude)
          console.log(self.scale,offset,self.markers[0].latitude)
          self.$apply();
        }
      });
      //console.log("region======",this.range_x,this.range_y)
    }
    async getCityNameFromTX(latitude, longitude) {
      const url = `https://apis.map.qq.com/ws/geocoder/v1/?location=${latitude},${longitude}&key=${txMapsKey}`;
      const res = await wepy.request({url: url, method: 'GET'}).catch((err)=>{
        console.log("error...",err.data);
        return {}
      });
      this.city = res.data.result.ad_info.city;
      this.province = res.data.result.ad_info.province;
      if(!this.scenic) {
        if(res.data.result.address_reference.famous_area){
          this.scenic = res.data.result.address_reference.famous_area.title;
        }else{
          this.scenic = res.data.result.address_reference.landmark_l2.title;
        }
      }
      this.$apply(); 
    }
    async getTraces(){
      console.log("this.scale=========",this.scale)
      let self = this;
      self.mapCtx.getCenterLocation({
        async success (res) {
          self.latitude = res.latitude;
          self.longitude = res.longitude;
          await self.mapCtx.getRegion({
            success:async function(res){
              let latitude1,longitude1,range_x1,range_y1,range_x2,range_y2,width1,height1;
              latitude1 = self.latitude
              longitude1 = self.longitude
              range_x1 = res.northeast.latitude;
              range_y1 = res.northeast.longitude;
              range_x2 = res.southwest.latitude;
              range_y2 = res.southwest.longitude;
              width1 = self.width;
              height1 = self.height;
              self.markers = []
              // self.markers.push({    //markers的第一个数据永远是当前位置，其他的数据来自trace表
              //   iconPath: '/static/images/occupy.png',
              //   id: 0,
              //   latitude: self.curLatitude,
              //   longitude: self.curLongitude,
              //   width: 40,
              //   height: 30,
              //   avatars:[],
              //   traceIds:[]
              // })
              // let offset = (res.northeast.latitude-res.southwest.latitude)*40/self.height
              // self.markers[0].latitude = self.curLatitude - offset
              let url = baseUrl + `/trace/getTraces?latitude=${latitude1}&longitude=${longitude1}&range_x1=${range_x1}&range_y1=${range_y1}&range_x2=${range_x2}&range_y2=${range_y2}&width=${width1}&height=${height1}`;
              const traces = await req.get(url).catch((err)=>{
                console.log("updateAvatarError...", err.data)})
              self.markers = _.union(self.markers,traces.data.data)
              console.log("self.",self.markers)
              self.$apply();
              // if(self.isDisplay){
              //   setTimeout(async()=>{
              //     await self.drawAvatar(self.markers);
              //   },200)
              // }
            }
          });
        }
      })
      self.$apply();
    }
    async getTraceInfo(traceId,way){
      let url = baseUrl + `/trace/getTrace?traceId=${traceId}`;
      const result = await req.get(url).catch((err)=>{
        console.log(err.data)})
      let trace = result.data.data;
      this.name = trace.name;
      this.locationName = trace.scenic;
      this.scenic = trace.scenic;
      this.city = trace.city;
      this.declaration = trace.declaration;
      this.parisecount = trace.parisecount;
      this.number = trace.number;
      this.avatar = trace.avatar;
      let date  = new Date(trace.created*1000);
      let year = date.getFullYear();
      let month = date.getMonth()+1;
      let day = date.getDate();
      this.dateString = year + '.' + month + '.' + day;
      if(trace.userId == this.$parent.globalData.user.id){
        this.isOwner = true;
      }
      if(way){
        this.latitude = trace.latitude;
        this.longitude = trace.longitude
      }
      let self = this;
      wx.getStorage({
        key:this.$parent.globalData.user.id+ String(traceId),
        success (res){
          self.imageUrl = "/static/images/zan.jpg";
          self.isParised = true;
          self.$apply();
        },
        async complete(){
          self.getImages(traceId)
        }
      })
    }
    // 分享
    onShareAppMessage(res) {
      let title = "我占领了" + this.city + this.scenic;
      let path = `pages/index`
      return {
        title: title,
        path: path
      };
    }
    async getImages(traceId){
      let url = baseUrl + `/image/get?traceId=${traceId}`;
      const result = await req.get(url).catch((err)=>{
        console.log("updateAvatarError...", err.data)})
      if(result.data.data.imageCount){
        for(var i=0;i<result.data.data.imageCount;i++){
          this.imgbox.push(baseUrl+"/static/image/"+traceId+'/'+result.data.data.images[i]) 
        }
      }
      this.$apply();
    }
    async drawAvatar(markers){
      let self = this
      const ctx = wepy.createCanvasContext('myCanvas');
      let radius = 20;
      let d = 40;
      let x = 200;
      ctx.beginPath()
      for(var j=1; j < markers.length; j++){  
        let offset = 0
        if(markers[j].avatars.length>1){
          for(var i=markers[j].avatars.length-1; i >=0; i--){
          let avatar = await wepy.downloadFile({url:markers[j].avatars[i]}); 
          ctx.drawImage(avatar.tempFilePath, x - offset-d, 40*(j-1), d, 40);
          ctx.save()
          offset = offset + 40*Math.pow(0.20,i)
          }
          markers[j]['width'] = offset
        }
      } 
      
      ctx.draw(true, async ()=>{
        //绘制方法
        for(var j=1; j < markers.length; j++){
          if(markers[j].avatars.length>1){
            const res = await wepy.canvasToTempFilePath({
              x:x-markers[j]['width'],
              y:40*(j-1),
              width:markers[j]['width'],
              height:40,
              destWidth:markers[j]['width'],
              destHeight:40,
              canvasId: 'myCanvas',
              fileType: 'jpeg',
            });
            markers[j]['iconPath'] = res.tempFilePath;
          }
        }
        self.markers = markers;
        self.$apply();
      })
    }
    async uploadPhoto(e){
      let self = this;
      var imgbox = self.imgbox;
      var picid = e.currentTarget.dataset.pic;
      var n = 6;
      if (6 > imgbox.length > 0) {
        n = 6 - imgbox.length;
      } else if (imgbox.length == 6) {
        n = 1;
      }
      const res = await wepy.chooseImage({
        count: n,
        sizeType: ['original', 'compressed'],
        sourceType: ['camera','album']
      })
      if (imgbox.length == 0) {
        imgbox = res.tempFilePaths
      } else if (6 > imgbox.length) {
        imgbox = imgbox.concat(res.tempFilePaths);
      } else {
        imgbox[picid] = res.tempFilePaths[0];
      }
      self.imgbox = imgbox;
      self.$apply();
    }
    async closeModal(){
      this.showModal = false;
      this.isOwner = false;
      this.imgbox = []
      this.height = wepy.getSystemInfoSync().windowHeight 
      await wepy.showTabBar();
      this.$apply();
  }
    async occupy() {
      if (!this.isAuth){
        wx.showToast({
          title: '请先授权用户信息',
          icon:'none'})
      }else{
        this.getCityNameFromTX(this.curLatitude,this.curLongitude);
        this.showModal = true;
        this.isOccupied = false;
        this.markerId = -1;
        this.height = 0.2*wepy.getSystemInfoSync().windowHeight
        this.$apply();
      }
    }
    async userLogin(e) {
      const userInfo = e.detail.userInfo;
      if (userInfo) {
        if (!this.$parent.globalData.userInfo) {
          const setting = await wepy.getSetting()
          if (setting.authSetting['scope.userInfo']) {
            const info = await wepy.getUserInfo()
            this.$parent.globalData.userInfo = info.userInfo
            let url = baseUrl + '/auth/updateUser'
            this.$parent.globalData.user.name = info.userInfo.nickName;
            this.$parent.globalData.user.avatar = info.userInfo.avatarUrl;
            const ctx = wepy.createCanvasContext('myCanvas');
            let that = this;
            ctx.arc(100, 100, 100, 0, 2 * Math.PI);
            ctx.clip();            
            let avatar = await wepy.downloadFile({url:info.userInfo.avatarUrl}); 
            ctx.drawImage(avatar.tempFilePath, 0, 0, 200, 200);
            ctx.draw(false);
            setTimeout(() => {
              wx.canvasToTempFilePath({
                x:0,
                y:0,
                width:200,
                height:200,
                destWidth:200,
                destHeight:200,
                canvasId: 'myCanvas',
                fileType: 'jpeg',
                success(res){
                  wx.uploadFile({
                    url: baseUrl + `/image/save?id=${that.$parent.globalData.user.id}`,
                    filePath: res.tempFilePath,
                    name: 'avatar',
                    header: {
                      'content-type':'multipart/form-data'
                  },
                    async success(res){
                      let avatarUrl = baseUrl + '/static/avatar/'+that.$parent.globalData.user.id+'/avatar.jpg'
                      const setData = {'id':that.$parent.globalData.user.id, 'name': info.userInfo.nickName, 'avatar': avatarUrl, 'gender': info.userInfo.gender}
                      const userId = await req.post(url, setData).catch((err)=>{
                        console.log("updateAvatarError...", err.data)})
                    }
                  })
                }
              })
            }, 1000);
            this.isAuth = true;
            this.$apply();
          }
        }
        else{
          wx.switchTab({url: '/pages/ablum'})
        }          
      }
    }
    preventTouchMove() {

      }
    async getOtherTraces(){
      let self = this;
      let latitude1,longitude1,range_x1,range_y1,range_x2,range_y2,width1,height1;
      latitude1 = self.latitude
      longitude1 = self.longitude
      range_x1 = self.latitude+0.25
      range_y1 = self.longitude+0.25
      range_x2 = self.latitude-0.25
      range_y2 = self.longitude-0.25
      width1 = self.width;
      height1 = self.height;
      self.markers = []
      // self.markers.push({    //markers的第一个数据永远是当前位置，其他的数据来自trace表
      //   iconPath: '/static/images/occupy.png',
      //   id: 0,
      //   latitude: self.curLatitude,
      //   longitude: self.curLongitude,
      //   width: 40,
      //   height: 40,
      //   avatars:[],
      //   traceIds:[]
      // })
      // let offset = (res.northeast.latitude-res.southwest.latitude)*40/self.height
      // self.markers[0].latitude = self.curLatitude - offset
      let url = baseUrl + `/trace/getTraces?latitude=${latitude1}&longitude=${longitude1}&range_x1=${range_x1}&range_y1=${range_y1}&range_x2=${range_x2}&range_y2=${range_y2}&width=${width1}&height=${height1}`;
      const traces = await req.get(url).catch((err)=>{
        console.log("updateAvatarError...", err.data)})
      self.markers = _.union(self.markers,traces.data.data)
      console.log("self.",self.markers)
      self.$apply();
      // if(self.isDisplay){
      //   setTimeout(async()=>{
      //     await self.drawAvatar(self.markers);
      //   },200)
      // }
    }
    methods = {
      bindFormSubmit(e){
        this.content = e.detail.value;
        this.$apply();
      },
      async large(){
        if(this.scale<21){
          this.scale = this.scale+1;
          this.markers = []
          this.$apply();
          if(this.isDisplay){
            await this.getTraces()
          }             
        }  
      },
      async narrow(){
        if(this.scale>5){
          this.scale = this.scale-1;
          this.markers = []
          this.$apply();
          if(this.isDisplay){
            await this.getTraces()
          }          
        } 
      },
      disPlay(){
        if(this.isDisplay){
          this.isDisplay = false;
          this.buttonContent = '显示占领者';
          this.markers = []
        }else{
          this.isDisplay = true;
          this.buttonContent = '不显示占领者'
          this.markers = []
          this.$apply();
          this.getTraces();
        }
        this.$apply();
      },
      async hideModal(){
        this.closeModal();
      },
      imgDelete(e){
        let index = e.currentTarget.dataset.deindex;
        this.imgbox.splice(index, 1);
        this.$apply();
      },
      chooseLocation(){
        let self = this;
        wx.chooseLocation({
          success: function (res) {    
            self.scenic = res.name;
            self.latitude = res.latitude;
            self.longitude = res.longitude;
            self.$apply();
        //    wx.navigateBack({url: `/pages/occupy?locationName=${res.name}&latitude=${res.latitude}&longitude=${res.longitude}&imgbox=${e.imgbox}`})
          },
          fail: function (err){
           // wx.navigateBack({url: `/pages/occupy?imgbox=${e.imgbox}`})
          }
        })
      },
      async confirm(e) {       
        let url = baseUrl + '/trace/addTrace';
        console.log(this.content)
        let declaration = this.content.substring(5,this.content.length)
        const setData = {'userId':this.$parent.globalData.user.id, 'latitude': this.curLatitude, 'longitude': this.curLongitude, 'scenic': this.scenic, 'declaration':declaration, 'province':this.province, 'city':this.city, 'onmap':1}
        const result = await req.post(url, setData).catch((err)=>{
          console.log("updateAvatarError...", err.data)})
        
        if(result.data.data.traceId){
          let self = this;
          let imgurl = baseUrl + `/image/save`
          for(var i = 0; i<this.imgbox.length ; i++){
            (function(i){
              wx.uploadFile({
                url: baseUrl + `/image/save?id=${result.data.data.traceId}`,
                filePath: self.imgbox[i],
                name: 'image',
                formData:{'number':i},
                header: {
                  'content-type':'multipart/form-data'
              },
                success(res){
                }
              })
            })(i)
          }   
        }
       // this.onLoad()
       this.id = result.data.data.traceId;
       this.$parent.globalData.user.new = true;
       this.afterOccupy(result.data.data.traceId,this.iconPath);
        //wx.navigateTo({url: `/pages/traceshow?traceId=${result.data.data.traceId}&latitude=${this.markers[0].latitude}&longitude=${this.markers[0].longitude}`})
      },
      previewImage(imageUrl){
        wx.previewImage({
          current: imageUrl, // 当前显示图片的http链接
          urls: this.imgbox // 需要预览的图片http链接列表
        })
      },
      async changeParisecount(traceId){
        if(this.isParised){
          this.parisecount--;
          this.isParised = false;
          wx.setStorage({
            key:this.$parent.globalData.user.id + String(traceId),
            data:0
          })
          this.imageUrl = "/static/images/heart.jpg"
        }else{
          this.parisecount++;
          this.isParised = true;
          wx.setStorage({
            key:this.$parent.globalData.user.id + String(traceId),
            data:1
          })
          this.imageUrl = "/static/images/zan.jpg"
        }
        this.$apply();
        let url = baseUrl + `/trace/updateTrace?id=${traceId}`
        const setData = {'parisecount': this.parisecount}
        await req.post(url, setData).catch((err)=>{
          console.log("updateAvatarError...", err.data)})
      },
      getPost() {
        wx.navigateTo({url: `/pages/post?traceId=${this.id}`})
      }
    }
  }
</script>