<template>
  <view class='container'>
    <ecCanvas id='mychart-dom-area' :canvasId.sync='canvasId' :ec.sync='ec'></ecCanvas>
    <view class='circleBar'>
      <view class="wrap">
        <view class="top">
          <canvas class="cir" style=' width:100%; height:180px;' canvas-id="canvasArc"></canvas>
          <view class="centerWord">{{resultComment}}</view>
        </view>
      </view>
      <button class='button' @tap="editTrace">编辑我的足迹</button>
    </view>
  </view>
</template>

<script>
    import wepy from 'wepy';
    import { baseUrl, appId} from '@/config'
    import req from '@/network'
    import _ from 'underscore'
    import EcCanvas from '../ec-canvas/ec-canvas';
    import * as echarts from '../ec-canvas/echarts.min';
    import geoJson from '../static/data/china.js';
    export default class PieChartPage extends wepy.page {
      config = {
          navigationBarTitleText: '我的足迹'
      };
      components = {
          ecCanvas: EcCanvas
      };
      data = {
          canvasId: 'myMap',
          ec: {
              onInit: this.initChart
          },
          geoCoordMap:[],
      };
      
      onLoad() {
        this.$apply();
      }
      async initChart(canvas, width, height,userId) {
        let self = this
        var mapFeatures = geoJson.features;
        let geoCoordMap = []
        let url = baseUrl + `/trace/getMyTraces?userId=${userId}`;
        const traces = await req.get(url).catch((err)=>{
          console.log("updateAvatarError...", err.data)})
        console.log(traces,"****************");
        if (traces.data) {
          let data = traces.data.data;
          for(var i=0;i<data.length;i++) {
            let marker = {};
            marker['id'] = data[i].id
            marker['value'] = [data[i].longitude,data[i].latitude]
            geoCoordMap.push(marker);
          }
        }
        const chart = echarts.init(canvas, null, {
            width: width,
            height: height
        });
        canvas.setChart(chart);
        echarts.registerMap('china', geoJson);
        const option = {
          tooltip: {
            trigger: 'item'
          },

          toolbox: {
            show: true,
            orient: 'vertical',
            left: 'right',
            top: 'center',
            feature: {
              dataView: { readOnly: false },
              restore: {},
              saveAsImage: {}
            }
          },
          geo: {
            show: true,
            map: 'china',
            label: {
                normal: {
                    show: false
                },
                emphasis: {
                    show: false,
                }
            },
            roam: true,
            itemStyle: {
                normal: {
                    areaColor: '#031525',
                    borderColor: '#3B5077',
                },
                emphasis: {
                    areaColor: '#2B91B7',
                }
            }
          },
          series: [{
            type: 'map',
            mapType: 'china',
            label: {
              normal: {
                show: true
              },
              emphasis: {
                textStyle: {
                  color: 'yellow'
                }
              }
            },
            itemStyle: {

              normal: {
                borderColor: '#389BB7',
                areaColor: '#fff',
              },
              emphasis: {
                areaColor: 'lightskyblue',
                borderWidth: 0
              }
            },
            animation: false
          },
          {
            name: '散点',
            type: 'scatter',
            coordinateSystem: 'geo',
            data: geoCoordMap,
            label: {
                normal: {
                    formatter: '{b}',
                    position: 'right',
                    show: true
                },
                emphasis: {
                    show: true
                }
            },
            itemStyle: {
                normal: {
                    color: '#05C3F9'
                }
            }
          }
          ],

        };
        let cxt_arc = wx.createCanvasContext('canvasArc');//创建并返回绘图上下文context对象。
        let cityCount =  _.size(_.groupBy(traces.data.data,function(obj){return obj.city}));
        let provinceCount =  _.size(_.groupBy(traces.data.data,function(obj){return obj.province}));
        console.log(cityCount,provinceCount)
        const width1 = wepy.getSystemInfoSync().windowWidth;
        cxt_arc.setLineWidth(6);//绘线的宽度
        cxt_arc.setStrokeStyle('#d2d2d2');//绘线的颜色
        cxt_arc.setLineCap('round');//线条端点样式
        cxt_arc.beginPath();//开始一个新的路径
        cxt_arc.arc(width1/2, 53, 45, 0, 2 * Math.PI, false);//设置一个原点(53,53)，半径为50的圆的路径到当前路径
        cxt_arc.setFontSize(14)
        cxt_arc.fillText('超过了', width1/2-20, 35);
        cxt_arc.fillText('的小伙伴', width1/2-27, 75);
        cxt_arc.setFontSize(20)
        cxt_arc.setFillStyle('red')
        cxt_arc.fillText('80%', width1/2-20, 55);
        cxt_arc.closePath()
        cxt_arc.stroke();//对当前路径进行描边
        cxt_arc.beginPath();//开始一个新的路径
        cxt_arc.arc(width1/2-95, 53, 40, 0, 2 * Math.PI, false);//设置一个原点(53,53)，半径为50的圆的路径到当前路径
        cxt_arc.setFontSize(14)
        cxt_arc.setFillStyle('black')
        cxt_arc.fillText('省份', width1/2-95-15, 40);
        cxt_arc.setFontSize(20)
        cxt_arc.setFillStyle('red')
        cxt_arc.fillText(String(provinceCount), width1/2-95-15, 66);
        cxt_arc.closePath()
        cxt_arc.stroke();//对当前路径进行描边
        cxt_arc.beginPath();//开始一个新的路径
        cxt_arc.arc(width1/2+95, 53, 40, 0, 2 * Math.PI, false);//设置一个原点(53,53)，半径为50的圆的路径到当前路径
        cxt_arc.setFontSize(14)
        cxt_arc.setFillStyle('black')
        cxt_arc.fillText('城市', width1/2+95-15, 40);
        cxt_arc.setFontSize(20)
        cxt_arc.setFillStyle('red')
        cxt_arc.fillText(String(cityCount), width1/2+95-15, 66);
        cxt_arc.closePath()
        cxt_arc.stroke();//对当前路径进行描边
        //cxt_arc.stroke();//对当前路径进行描边
        //这部分是蓝色部分
        cxt_arc.beginPath();//开始一个新的路径
        cxt_arc.setLineWidth(6);
        cxt_arc.setStrokeStyle('#3ea6ff');
        cxt_arc.setLineCap('round')
        cxt_arc.arc(width1/2, 53, 45, -Math.PI * 1 / 2, 2 * Math.PI * 0.8 - Math.PI * 1 / 2, false);
        cxt_arc.stroke();//对当前路径进行描边
        cxt_arc.beginPath();//开始一个新的路径
        cxt_arc.arc(width1/2-95, 53, 40, -Math.PI * 1 / 2, 2 * Math.PI * 0.8 - Math.PI * 1 / 2, false);
        cxt_arc.stroke();//对当前路径进行描边
        cxt_arc.beginPath();//开始一个新的路径
        cxt_arc.arc(width1/2+95, 53, 40, -Math.PI * 1 / 2, 2 * Math.PI * 0.8 - Math.PI * 1 / 2, false);
        cxt_arc.stroke();//对当前路径进行描边
        cxt_arc.draw()
        chart.setOption(option);
        return chart;
        }
      methods = {
        editTrace(){
          wx.navigateTo({url: 'edittrace'})
        }
      }
    }
</script>

<style>
  .container{
    position:absolute;
    top:0;
    bottom:0;
    left:0;
    right:0;
    display:flex;
    flex-direction:column;
    align-items:center;
    justify-content:space-between;
    box-sizing:border-box;
  }
  .circleBar {
  width: 100%;
  height: auto;
  overflow: hidden;
  position: relative;
  }
  
  .cir {
    display: inline-block;
    background-color: #fff;
    border-radius: 100%;
  }
  
  .top {
    text-align: center;
  }
  .button{
    position: fixed;
    top: 0;
    left: 10px;
  }
  .centerWord {
    width: 100%;
    position: absolute;
    top: 40px;
    left: 0;
    text-align: center;
    color: #3686ff;
  }
</style>
